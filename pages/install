#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
DARK_GREEN='\033[0;32m'
LIGHT_GREEN='\033[1;32m'
NC='\033[0m' # No Color

# Banner
echo -e "${DARK_GREEN}┌─────────────────────────────────────────────┐${NC}"
echo -e "${DARK_GREEN}│  ${LIGHT_GREEN}Contextus - Model Context Protocol Manager${DARK_GREEN} │${NC}"
echo -e "${DARK_GREEN}└─────────────────────────────────────────────┘${NC}"
echo ""

# Function to print colored output
info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

success() {
    echo -e "${GREEN}✓${NC} $1"
}

warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if Python 3 is installed
if ! command -v python3 &> /dev/null; then
    error "Python 3 is not installed. Contextus requires Python 3.8 or higher."
    echo ""
    echo "Please install Python 3 and try again:"
    echo "  • macOS: brew install python3"
    echo "  • Ubuntu/Debian: sudo apt update && sudo apt install python3 python3-pip"
    echo "  • CentOS/RHEL: sudo yum install python3 python3-pip"
    echo "  • Windows: Download from https://python.org"
        exit 1
    fi

# Get Python version
PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
info "Found Python $PYTHON_VERSION"

# Check if Python version is 3.8 or higher
if python3 -c 'import sys; exit(0 if sys.version_info >= (3, 8) else 1)'; then
    success "Python version is compatible"
else
    error "Python 3.8 or higher is required. Found Python $PYTHON_VERSION"
        exit 1
    fi

# Create user bin directory if it doesn't exist
USER_BIN="$HOME/.local/bin"
mkdir -p "$USER_BIN"

# Check if ~/.local/bin is in PATH
if [[ ":$PATH:" != *":$USER_BIN:"* ]]; then
    warning "~/.local/bin is not in your PATH"
    echo "Adding ~/.local/bin to your PATH..."
    
    # Add to shell profile
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc
        info "Added to ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
        info "Added to ~/.bashrc"
    else
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.profile
        info "Added to ~/.profile"
    fi
    
    # Export for current session
    export PATH="$HOME/.local/bin:$PATH"
fi

# Function to install Contextus
install_contextus() {
    info "Installing Contextus..."
    
    # Check if pipx is available
    if command -v pipx &> /dev/null; then
        info "Found pipx, using it for installation..."
        if pipx list | grep -q "contextus"; then
            info "Contextus is already installed via pipx, upgrading..."
            pipx upgrade contextus
        else
            info "Using pipx to install Contextus (recommended)..."
            pipx install contextus
        fi
    elif python3 -m pip show pipx &> /dev/null; then
        info "pipx is installed but not in PATH, using it anyway..."
        info "Now installing Contextus with pipx..."
        pipx install contextus
        else
        info "Creating a dedicated virtual environment for Contextus..."
        CONTEXTUS_VENV="$HOME/.contextus-venv"
        python3 -m venv "$CONTEXTUS_VENV"
        "$CONTEXTUS_VENV/bin/pip" install contextus
        
        # Create symlink in user bin
        if [[ -f "$CONTEXTUS_VENV/bin/contextus" ]]; then
            ln -sf "$CONTEXTUS_VENV/bin/contextus" "$USER_BIN/contextus"
        fi
        
        info "Installed Contextus in a virtual environment at $CONTEXTUS_VENV"
        info "Added symlink to $USER_BIN/contextus"
    fi
}

# Check if we should use pipx
if command -v pipx &> /dev/null; then
    success "pipx is available"
    install_contextus
elif python3 -c "import pipx" 2>/dev/null; then
    success "pipx is installed"
    install_contextus
else
    info "pipx not found, checking if we should install it..."
    
    # Ask user if they want to install pipx
    echo ""
    echo "pipx is the recommended way to install Python CLI tools like Contextus."
    echo "It creates isolated environments for each tool, preventing conflicts."
    echo ""
    read -p "Would you like to install pipx first? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info "Installing pipx..."
        python3 -m pip install --user pipx
        python3 -m pipx ensurepath
        
        # Reload PATH
        export PATH="$HOME/.local/bin:$PATH"
        
        if command -v pipx &> /dev/null; then
            success "pipx installed successfully"
            info "Using pipx to install Contextus (recommended)..."
            pipx install contextus
        else
            warning "pipx installation may not be in PATH yet"
            info "Installing Contextus with pip in a virtual environment..."
            install_contextus
        fi
    else
        info "Installing Contextus with pip in a virtual environment..."
        install_contextus
        fi
    fi

# Verify installation
echo ""
info "Verifying installation..."

if command -v contextus &> /dev/null; then
    success "Contextus installed successfully!"
    echo ""
    echo -e "${CYAN}🎉 Installation complete!${NC}"
    echo ""
    echo "Try these commands to get started:"
    echo -e "  ${WHITE}contextus --help${NC}          # Show help"
    echo -e "  ${WHITE}contextus search${NC}           # Search for MCP servers"
    echo -e "  ${WHITE}contextus client ls${NC}        # List supported clients"
    echo ""
    echo -e "For more information, visit ${DARK_GREEN}https://contextus.sh${NC}"
else
    error "Installation verification failed"
    echo ""
    echo "Contextus may not be in your PATH. Try:"
    echo "  1. Restart your terminal"
    echo "  2. Run: source ~/.bashrc (or ~/.zshrc)"
    echo "  3. Or run: export PATH=\"\$HOME/.local/bin:\$PATH\""
    exit 1
fi
